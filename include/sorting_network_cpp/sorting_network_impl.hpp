/*
  Copyright (C) Lukas Riebel 2020.
  Distributed under the MIT License
  (license terms are at http://opensource.org/licenses/MIT).
*/

#pragma once

#include <utility>
#include <algorithm>
#include <tuple>

#if defined(__NVCC__)
#define TCC_CUDA __host__ __device__
#else
#define TCC_CUDA
#endif

namespace tcc
{
  enum class NetworkType
  {
    InsertionSort,
    BubbleSort,
    BoseNelsonSort,
    BatcherOddEvenMergeSort,
    BitonicMergeSort,
    SizeOptimizedSort
  };

  template <typename T, typename C>
  struct CompareAndSwap
  {
    TCC_CUDA void operator()(T& a, T& b, C comp) const
    {
      T t = comp(a, b) ? a : b;
      b = comp(a, b) ? b : a;
      a = t;
    }
  };

  namespace details
  {
    namespace util
    {
      template <int Current, int End, int Step = 1, typename F>
      static void static_for(F callable)
      {
        if constexpr (Current < End)
        {
          callable(std::integral_constant<int, Current>());
          static_for<Current + Step, End, Step, F>(callable);
        }
      };

      template <unsigned int Num>
      struct CountLeadingZeros
      {
        static inline constexpr unsigned int NumBits = sizeof(unsigned int) * 8;
        static inline constexpr bool FirstBitSet = (Num & (0x1 << (NumBits - 1))) != 0;

        static inline constexpr unsigned int Value = FirstBitSet ? 0 : CountLeadingZeros<(Num<<1)>::Value + 1;
      };

      template <>
      struct CountLeadingZeros<0>
      {
        static inline constexpr unsigned int Value = 0;
      };

      template <typename T, typename C, typename ... LayerPairs>
      static inline void ProcessLayerPairs(T* ptr, C comp, std::tuple<LayerPairs...> layerPairs)
      {
        (CompareAndSwap<T, C>()(ptr[std::tuple_element_t<0, LayerPairs>{}],
                                ptr[std::tuple_element_t<1, LayerPairs>{}],
                                comp), ...);
      }
    }

    template <size_t N, NetworkType NWT>
    struct SortingNetworkImpl;


    /*
      Generates an insertion sort sorting network of following form
      (0,1)
      (1,2) (0,1)
      (2,3) (1,2) (0,1)
      ...
      (N-2,N-1) (2,3) (1,2) (0,1)
    */
    template <size_t N>
    struct SortingNetworkImpl<N, NetworkType::InsertionSort>
    {
      static_assert(N >= 1);

      template <typename T, typename C>
      void operator()(T* ptr, C comp) const
      {
        (*this)(ptr, comp, std::make_index_sequence<N>());
      }

    private:

      template <typename T, typename C, size_t ... Indices>
      void operator()(T* ptr, C comp, std::index_sequence<Indices...>) const
      {
        (GenerateLayerPairs(ptr, comp, std::make_index_sequence<Indices>()), ...);
      }

      template <size_t A, size_t B>
      using P = std::tuple<std::integral_constant<size_t, A>, std::integral_constant<size_t, B>>;

      template <typename T, typename C, size_t ... Indices>
      inline void GenerateLayerPairs(T* ptr, C comp, std::index_sequence<Indices...> indices) const
      {
        constexpr size_t Q = sizeof...(Indices);
        (util::ProcessLayerPairs(ptr, comp, std::tuple<P<Q - Indices - 1, Q - Indices>>{}), ...);
      }
    };


    /*
      Generates an bubble sort sorting network of following form
      (0,1) (1,2) (2,3) ... (N-2,N-1)
      ...
      (0,1) (1,2) (2,3)
      (0,1) (1,2)
      (0,1)
    */
    template <size_t N>
    struct SortingNetworkImpl<N, NetworkType::BubbleSort>
    {
      static_assert(N >= 1);

      template <typename T, typename C>
      void operator()(T* ptr, C comp)
      {
        (*this)(ptr, comp, std::make_index_sequence<N>());
      }

    private:

      template <typename T, typename C, size_t ... Indices>
      void operator()(T* ptr, C comp, std::index_sequence<Indices...>) const
      {
        (GenerateLayerPairs(ptr, comp, std::make_index_sequence<N - Indices - 1>()), ...);
      }

      template <size_t A, size_t B>
      using P = std::tuple<std::integral_constant<size_t, A>, std::integral_constant<size_t, B>>;

      template <typename T, typename C, size_t ... Indices>
      void GenerateLayerPairs(T* ptr, C comp, std::index_sequence<Indices...> indices) const
      {
        (util::ProcessLayerPairs(ptr, comp, std::tuple<P<Indices, Indices + 1>>{}), ...);
      }
    };


    /*
      Generates a sorting network based on the algorithm proposed
      by Bose and Nelson in "A Sorting Problem" (1962),
      adapted from https://github.com/Vectorized/Static-Sort
    */
    template <size_t N>
    struct SortingNetworkImpl<N, NetworkType::BoseNelsonSort>
    {
      static_assert(N >= 1);

      template <typename T, typename C>
      TCC_CUDA void operator()(T* ptr, C comp) const
      {
        PStar<T, C, 1, N>(ptr, comp);
      }

    private:

      template <typename T, typename C, int Lo, int N_>
      TCC_CUDA void PStar(T* ptr, C comp) const
      {
        // Expansion of recursive formula at 5.1i (P*)
        constexpr int M = N_ / 2;

        if constexpr (M > 1)
          PStar<T, C, Lo, M>(ptr, comp);

        if constexpr (N_ - M > 1)
          PStar<T, C, Lo + M, N_ - M>(ptr, comp);

        P<T, C, Lo, Lo + M, M, N_ - M>(ptr, comp);
      }

      template <typename T, typename C, int I, int J, int X, int Y>
      TCC_CUDA void P(T* ptr, C comp) const
      {
        if constexpr (X == 1 && Y == 1)
        {
          Swap<T, C, I - 1, J - 1>(ptr, comp);
        }
        else if constexpr (X == 1 && Y == 2)
        {
          Swap<T, C, I - 1, J>(ptr, comp);
          Swap<T, C, I - 1, J - 1>(ptr, comp);
        }
        else if constexpr (X == 2 && Y == 1)
        {
          Swap<T, C, I - 1, J - 1>(ptr, comp);
          Swap<T, C, I, J - 1>(ptr, comp);
        }
        else
        {
          constexpr int L = X / 2;
          constexpr int M = (X & 1 ? Y : Y + 1) / 2;

          P<T, C, I, J, L, M>(ptr, comp);
          P<T, C, I + L, J + M, X - L, Y - M>(ptr, comp);
          P<T, C, I + L, J,     X - L, M    >(ptr, comp);
        }
      }

      template <typename T, typename C, int I0, int I1>
      TCC_CUDA void Swap(T* ptr, C comp) const
      {
        CompareAndSwap<T, C>()(ptr[I0], ptr[I1], comp);
      }
    };

    /*
      Generates a sorting network based the construction scheme
      by Ken Batcher
    */
    template <size_t N>
    struct SortingNetworkImpl<N, NetworkType::BatcherOddEvenMergeSort>
    {
      static_assert((N > 0) && !(N & (N - 1)), "N must be a power of two!");

      template <typename T, typename C>
      void operator()(T* ptr, C comp) const
      {
        Sort<T, C, 0, N - 1>()(ptr, comp);
      }

    private:

      template <typename T, typename C, int Lo, int Hi>
      struct Sort
      {
        void operator()(T* ptr, C comp) const
        {
          constexpr int Mid = Lo + (Hi - Lo) / 2;

          if constexpr (Hi - Lo >= 1)
          {
            Sort <T, C, Lo, Mid>()(ptr, comp);
            Sort <T, C, Mid + 1, Hi>()(ptr, comp);
            Merge<T, C, Lo, Hi, 1>()(ptr, comp);
          }
        }
      };

      template <typename T, typename C, int I, int J, int R>
      struct Merge
      {
        void operator()(T* ptr, C comp) const
        {
          constexpr int Step = R * 2;

          if constexpr (Step <= J - I)
          {
            Merge<T, C, I, J, Step>()(ptr, comp);
            Merge<T, C, I + R, J, Step>()(ptr, comp);

            util::static_for<I + R, J - R, Step>([=](auto i){
              constexpr auto k = i;
              CompareAndSwap<T, C>()(ptr[k], ptr[k+R], comp);
            });
          }
          else
          {
            CompareAndSwap<T, C>()(ptr[I], ptr[I + R], comp);
          }
        }
      };
    };

    /*
      Generates a bitonic sorting network
    */
    template <size_t N>
    struct SortingNetworkImpl<N, NetworkType::BitonicMergeSort>
    {
      static_assert(N >= 1);

      template <typename T, typename C>
      void operator()(T* ptr, C comp) const
      {
        Sort<T, C, 0, N-1, false>()(ptr, comp);
      }

    private:

      template <typename T, typename C, int Lo, int Hi, bool Inv>
      struct Sort
      {
        void operator()(T* ptr, C comp) const
        {
          if constexpr (Hi - Lo >= 1)
          {
            constexpr int Mid = Lo + (Hi - Lo + 1) / 2;

            Sort<T, C, Lo, Mid - 1, !Inv>()(ptr, comp);
            Sort<T, C, Mid, Hi, Inv>()(ptr, comp);
            Merge<T, C, Lo, Hi, Inv>()(ptr, comp);
          }
        }
      };

      template <typename T, typename C, int Lo, int Hi, bool Inv>
      struct Merge
      {
        void operator()(T* ptr, C comp) const
        {
          if constexpr (Hi - Lo >= 1)
          {
            static constexpr int n = (Hi - Lo + 1);

            // calculate m as the next smallest power of 2 for n
            static constexpr int lz = util::CountLeadingZeros<n-1>::Value;
            static constexpr int m = (lz == 0 ? 0 : 1 << (sizeof(util::CountLeadingZeros<0>::Value) * 8 - lz - 1));

            util::static_for<0, n - m, 1>([=](auto i){
              constexpr int i0 = Lo + i;
              constexpr int i1 = Lo + i + m;

              if constexpr (Inv)
              {
                using ComparatorT = decltype(std::not_fn(comp));
                CompareAndSwap<T, ComparatorT>()(ptr[i0], ptr[i1], std::not_fn(comp));
              }
              else
              {
                CompareAndSwap<T, C>()(ptr[i0], ptr[i1], comp);
              }
            });

            Merge<T, C, Lo, Lo + m - 1, Inv>()(ptr, comp);
            Merge<T, C, Lo + m, Hi, Inv>()(ptr, comp);
          }
        }
      };
    };

    /*
      Generates sorting networks which are either proven to be
      size optimal (and are thus comprised of minimum number of compare
      and swap operations) or are found by the "SorterHunter"
      algorithm (https://github.com/bertdobbelaere/SorterHunter)
    */
    template <size_t N>
    struct SortingNetworkImpl<N, NetworkType::SizeOptimizedSort>
    {
      static_assert(N >= 1 && N <= 32);

      template <typename T, typename C>
      void operator()(T* ptr, C comp) const
      {
        ApplyNet<T, C>(ptr, comp, std::tuple_element_t<N - 1, Networks>{});
      }

    private:
      template <uint32_t A, uint32_t B>
      using P = std::tuple<std::integral_constant<uint32_t, A>, std::integral_constant<uint32_t, B>>;

      template <typename ... Pairs>
      using L = std::tuple<Pairs...>;

      template <typename ... Layers>
      using Net = std::tuple<Layers...>;

      using Networks =
        std::tuple<
        /* 1 */  Net<L<P<0,0>>>,
        /* 2 */  Net<L<P<0,1>>>,
        /* 3 */  Net<L<P<0,2>>,
                     L<P<0,1>>,
                     L<P<1,2>>>,
        /* 4 */  Net<L<P<0,2>,P<1,3>>,
                     L<P<0,1>,P<2,3>>,
                     L<P<1,2>>>,
        /* 5 */  Net<L<P<0,3>,P<1,4>>,
                     L<P<0,2>,P<1,3>>,
                     L<P<0,1>,P<2,4>>,
                     L<P<1,2>,P<3,4>>,
                     L<P<2,3>>>,
        /* 6 */  Net<L<P<0,5>,P<1,3>,P<2,4>>,
                     L<P<1,2>,P<3,4>>,
                     L<P<0,3>,P<2,5>>,
                     L<P<0,1>,P<2,3>,P<4,5>>,
                     L<P<1,2>,P<3,4>>>,
        /* 7 */  Net<L<P<0,6>,P<2,3>,P<4,5>>,
                     L<P<0,2>,P<1,4>,P<3,6>>,
                     L<P<0,1>,P<2,5>,P<3,4>>,
                     L<P<1,2>,P<4,6>>,
                     L<P<2,3>,P<4,5>>,
                     L<P<1,2>,P<3,4>,P<5,6>>>,
        /* 8 */  Net<L<P<0,2>,P<1,3>,P<4,6>,P<5,7>>,
                     L<P<0,4>,P<1,5>,P<2,6>,P<3,7>>,
                     L<P<0,1>,P<2,3>,P<4,5>,P<6,7>>,
                     L<P<2,4>,P<3,5>>,
                     L<P<1,4>,P<3,6>>,
                     L<P<1,2>,P<3,4>,P<5,6>>>,
        /* 9 */  Net<L<P<0,3>,P<1,7>,P<2,5>,P<4,8>>,
                     L<P<0,7>,P<2,4>,P<3,8>,P<5,6>>,
                     L<P<0,2>,P<1,3>,P<4,5>,P<7,8>>,
                     L<P<1,4>,P<3,6>,P<5,7>>,
                     L<P<0,1>,P<2,4>,P<3,5>,P<6,8>>,
                     L<P<2,3>,P<4,5>,P<6,7>>,
                     L<P<1,2>,P<3,4>,P<5,6>>>,
        /* 10 */ Net<L<P<0,8>,P<1,9>,P<2,7>,P<3,5>,P<4,6>>,
                     L<P<0,2>,P<1,4>,P<5,8>,P<7,9>>,
                     L<P<0,3>,P<2,4>,P<5,7>,P<6,9>>,
                     L<P<0,1>,P<3,6>,P<8,9>>,
                     L<P<1,5>,P<2,3>,P<4,8>,P<6,7>>,
                     L<P<1,2>,P<3,5>,P<4,6>,P<7,8>>,
                     L<P<2,3>,P<4,5>,P<6,7>>,
                     L<P<3,4>,P<5,6>>>,
        /* 11 */ Net<L<P<0,9>,P<1,6>,P<2,4>,P<3,7>,P<5,8>>,
                     L<P<0,1>,P<3,5>,P<4,10>,P<6,9>,P<7,8>>,
                     L<P<1,3>,P<2,5>,P<4,7>,P<8,10>>,
                     L<P<0,4>,P<1,2>,P<3,7>,P<5,9>,P<6,8>>,
                     L<P<0,1>,P<2,6>,P<4,5>,P<7,8>,P<9,10>>,
                     L<P<2,4>,P<3,6>,P<5,7>,P<8,9>>,
                     L<P<1,2>,P<3,4>,P<5,6>,P<7,8>>,
                     L<P<2,3>,P<4,5>,P<6,7>>>,
        /* 12 */ Net<L<P<0,8>,P<1,7>,P<2,6>,P<3,11>,P<4,10>,P<5,9>>,
                     L<P<0,1>,P<2,5>,P<3,4>,P<6,9>,P<7,8>,P<10,11>>,
                     L<P<0,2>,P<1,6>,P<5,10>,P<9,11>>,
                     L<P<0,3>,P<1,2>,P<4,6>,P<5,7>,P<8,11>,P<9,10>>,
                     L<P<1,4>,P<3,5>,P<6,8>,P<7,10>>,
                     L<P<1,3>,P<2,5>,P<6,9>,P<8,10>>,
                     L<P<2,3>,P<4,5>,P<6,7>,P<8,9>>,
                     L<P<4,6>,P<5,7>>,
                     L<P<3,4>,P<5,6>,P<7,8>>>,
        /* 13 */ Net<L<P<0,12>,P<1,10>,P<2,9>,P<3,7>,P<5,11>,P<6,8>>,
                     L<P<1,6>,P<2,3>,P<4,11>,P<7,9>,P<8,10>>,
                     L<P<0,4>,P<1,2>,P<3,6>,P<7,8>,P<9,10>,P<11,12>>,
                     L<P<4,6>,P<5,9>,P<8,11>,P<10,12>>,
                     L<P<0,5>,P<3,8>,P<4,7>,P<6,11>,P<9,10>>,
                     L<P<0,1>,P<2,5>,P<6,9>,P<7,8>,P<10,11>>,
                     L<P<1,3>,P<2,4>,P<5,6>,P<9,10>>,
                     L<P<1,2>,P<3,4>,P<5,7>,P<6,8>>,
                     L<P<2,3>,P<4,5>,P<6,7>,P<8,9>>,
                     L<P<3,4>,P<5,6>>>,
        /* 14 */ Net<L<P<0,6>,P<1,11>,P<2,12>,P<3,10>,P<4,5>,P<7,13>,P<8,9>>,
                     L<P<1,2>,P<3,7>,P<4,8>,P<5,9>,P<6,10>,P<11,12>>,
                     L<P<0,4>,P<1,3>,P<5,6>,P<7,8>,P<9,13>,P<10,12>>,
                     L<P<0,1>,P<2,9>,P<3,7>,P<4,11>,P<6,10>,P<12,13>>,
                     L<P<2,5>,P<4,7>,P<6,9>,P<8,11>>,
                     L<P<1,2>,P<3,4>,P<6,7>,P<9,10>,P<11,12>>,
                     L<P<1,3>,P<2,4>,P<5,6>,P<7,8>,P<9,11>,P<10,12>>,
                     L<P<2,3>,P<4,7>,P<6,9>,P<10,11>>,
                     L<P<4,5>,P<6,7>,P<8,9>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>>>,
        /* 15 */ Net<L<P<1,2>,P<3,10>,P<4,14>,P<5,8>,P<6,13>,P<7,12>,P<9,11>>,
                     L<P<0,14>,P<1,5>,P<2,8>,P<3,7>,P<6,9>,P<10,12>,P<11,13>>,
                     L<P<0,7>,P<1,6>,P<2,9>,P<4,10>,P<5,11>,P<8,13>,P<12,14>>,
                     L<P<0,6>,P<2,4>,P<3,5>,P<7,11>,P<8,10>,P<9,12>,P<13,14>>,
                     L<P<0,3>,P<1,2>,P<4,7>,P<5,9>,P<6,8>,P<10,11>,P<12,13>>,
                     L<P<0,1>,P<2,3>,P<4,6>,P<7,9>,P<10,12>,P<11,13>>,
                     L<P<1,2>,P<3,5>,P<8,10>,P<11,12>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>>,
                     L<P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>>,
                     L<P<5,6>,P<7,8>>>,
        /* 16 */ Net<L<P<0,13>,P<1,12>,P<2,15>,P<3,14>,P<4,8>,P<5,6>,P<7,11>,P<9,10>>,
                     L<P<0,5>,P<1,7>,P<2,9>,P<3,4>,P<6,13>,P<8,14>,P<10,15>,P<11,12>>,
                     L<P<0,1>,P<2,3>,P<4,5>,P<6,8>,P<7,9>,P<10,11>,P<12,13>,P<14,15>>,
                     L<P<0,2>,P<1,3>,P<4,10>,P<5,11>,P<6,7>,P<8,9>,P<12,14>,P<13,15>>,
                     L<P<1,2>,P<3,12>,P<4,6>,P<5,7>,P<8,10>,P<9,11>,P<13,14>>,
                     L<P<1,4>,P<2,6>,P<5,8>,P<7,10>,P<9,13>,P<11,14>>,
                     L<P<2,4>,P<3,6>,P<9,12>,P<11,13>>,
                     L<P<3,5>,P<6,8>,P<7,9>,P<10,12>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>>,
                     L<P<6,7>,P<8,9>>>,
        /* 17 */ Net<L<P<0,11>,P<1,15>,P<2,10>,P<3,5>,P<4,6>,P<8,12>,P<9,16>,P<13,14>>,
                     L<P<0,6>,P<1,13>,P<2,8>,P<4,14>,P<5,15>,P<7,11>>,
                     L<P<0,8>,P<3,7>,P<4,9>,P<6,16>,P<10,11>,P<12,14>>,
                     L<P<0,2>,P<1,4>,P<5,6>,P<7,13>,P<8,9>,P<10,12>,P<11,14>,P<15,16>>,
                     L<P<0,3>,P<2,5>,P<6,11>,P<7,10>,P<9,13>,P<12,15>,P<14,16>>,
                     L<P<0,1>,P<3,4>,P<5,10>,P<6,9>,P<7,8>,P<11,15>,P<13,14>>,
                     L<P<1,2>,P<3,7>,P<4,8>,P<6,12>,P<11,13>,P<14,15>>,
                     L<P<1,3>,P<2,7>,P<4,5>,P<9,11>,P<10,12>,P<13,14>>,
                     L<P<2,3>,P<4,6>,P<5,7>,P<8,10>>,
                     L<P<3,4>,P<6,8>,P<7,9>,P<10,12>>,
                     L<P<5,6>,P<7,8>,P<9,10>,P<11,12>>,
                     L<P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>>>,
        /* 18 */ Net<L<P<0,1>,P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>>,
                     L<P<1,5>,P<2,6>,P<3,7>,P<4,10>,P<8,16>,P<9,17>,P<12,14>,P<13,15>>,
                     L<P<0,8>,P<1,10>,P<2,12>,P<3,14>,P<6,13>,P<7,15>,P<9,16>,P<11,17>>,
                     L<P<0,4>,P<1,9>,P<5,17>,P<8,11>,P<10,16>>,
                     L<P<0,2>,P<1,6>,P<4,10>,P<5,9>,P<14,16>,P<15,17>>,
                     L<P<1,2>,P<3,10>,P<4,12>,P<5,7>,P<6,14>,P<9,13>,P<15,16>>,
                     L<P<3,8>,P<5,12>,P<7,11>,P<9,10>>,
                     L<P<3,4>,P<6,8>,P<7,14>,P<9,12>,P<11,13>>,
                     L<P<1,3>,P<2,4>,P<7,9>,P<8,12>,P<11,15>,P<13,16>>,
                     L<P<2,3>,P<4,5>,P<6,7>,P<10,11>,P<12,14>,P<13,15>>,
                     L<P<4,6>,P<5,8>,P<9,10>,P<11,14>>,
                     L<P<3,4>,P<5,7>,P<8,9>,P<10,12>,P<13,14>>,
                     L<P<5,6>,P<7,8>,P<9,10>,P<11,12>>>,
        /* 19 */ Net<L<P<0,12>,P<1,4>,P<2,8>,P<3,5>,P<6,17>,P<7,11>,P<9,14>,P<10,13>,P<15,16>>,
                     L<P<0,2>,P<1,7>,P<3,6>,P<4,11>,P<5,17>,P<8,12>,P<10,15>,P<13,16>,P<14,18>>,
                     L<P<3,10>,P<4,14>,P<5,15>,P<6,13>,P<7,9>,P<11,17>,P<16,18>>,
                     L<P<0,7>,P<1,10>,P<4,6>,P<9,15>,P<11,16>,P<12,17>,P<13,14>>,
                     L<P<0,3>,P<2,6>,P<5,7>,P<8,11>,P<12,16>>,
                     L<P<1,8>,P<2,9>,P<3,4>,P<6,15>,P<7,13>,P<10,11>,P<12,18>>,
                     L<P<1,3>,P<2,5>,P<6,9>,P<7,12>,P<8,10>,P<11,14>,P<17,18>>,
                     L<P<0,1>,P<2,3>,P<4,8>,P<6,10>,P<9,12>,P<14,15>,P<16,17>>,
                     L<P<1,2>,P<5,8>,P<6,7>,P<9,11>,P<10,13>,P<14,16>,P<15,17>>,
                     L<P<3,6>,P<4,5>,P<7,9>,P<8,10>,P<11,12>,P<13,14>,P<15,16>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,13>,P<12,14>>,
                     L<P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>>>,
        /* 20 */ Net<L<P<0,3>,P<1,7>,P<2,5>,P<4,8>,P<6,9>,P<10,13>,P<11,15>,P<12,18>,P<14,17>,P<16,19>>,
                     L<P<0,14>,P<1,11>,P<2,16>,P<3,17>,P<4,12>,P<5,19>,P<6,10>,P<7,15>,P<8,18>,P<9,13>>,
                     L<P<0,4>,P<1,2>,P<3,8>,P<5,7>,P<11,16>,P<12,14>,P<15,19>,P<17,18>>,
                     L<P<1,6>,P<2,12>,P<3,5>,P<4,11>,P<7,17>,P<8,15>,P<13,18>,P<14,16>>,
                     L<P<0,1>,P<2,6>,P<7,10>,P<9,12>,P<13,17>,P<18,19>>,
                     L<P<1,6>,P<5,9>,P<7,11>,P<8,12>,P<10,14>,P<13,18>>,
                     L<P<3,5>,P<4,7>,P<8,10>,P<9,11>,P<12,15>,P<14,16>>,
                     L<P<1,3>,P<2,4>,P<5,7>,P<6,10>,P<9,13>,P<12,14>,P<15,17>,P<16,18>>,
                     L<P<1,2>,P<3,4>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<15,16>,P<17,18>>,
                     L<P<2,3>,P<4,6>,P<5,8>,P<7,9>,P<10,12>,P<11,14>,P<13,15>,P<16,17>>,
                     L<P<4,5>,P<6,8>,P<7,10>,P<9,12>,P<11,13>,P<14,15>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>>>,
        /* 21 */ Net<L<P<0,7>,P<1,10>,P<3,5>,P<4,8>,P<6,13>,P<9,19>,P<11,14>,P<12,17>,P<15,16>,P<18,20>>,
                     L<P<0,11>,P<1,15>,P<2,12>,P<3,4>,P<5,8>,P<6,9>,P<7,14>,P<10,16>,P<13,19>,P<17,20>>,
                     L<P<0,6>,P<1,3>,P<2,18>,P<4,15>,P<5,10>,P<8,16>,P<11,17>,P<12,13>,P<14,20>>,
                     L<P<2,6>,P<5,12>,P<7,18>,P<8,14>,P<9,11>,P<10,17>,P<13,19>,P<16,20>>,
                     L<P<1,2>,P<4,7>,P<5,9>,P<6,17>,P<10,13>,P<11,12>,P<14,19>,P<15,18>>,
                     L<P<0,2>,P<3,6>,P<4,5>,P<7,10>,P<8,11>,P<9,15>,P<12,16>,P<13,18>,P<14,17>,P<19,20>>,
                     L<P<0,1>,P<2,3>,P<5,9>,P<6,12>,P<7,8>,P<11,14>,P<13,15>,P<16,19>,P<17,18>>,
                     L<P<1,2>,P<3,9>,P<6,13>,P<10,11>,P<12,15>,P<16,17>,P<18,19>>,
                     L<P<1,4>,P<2,5>,P<3,7>,P<6,10>,P<8,9>,P<11,12>,P<13,14>,P<17,18>>,
                     L<P<2,4>,P<5,6>,P<7,8>,P<9,11>,P<10,13>,P<12,15>,P<14,16>>,
                     L<P<3,4>,P<5,7>,P<6,8>,P<9,10>,P<11,13>,P<12,14>,P<15,16>>,
                     L<P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>>>,
        /* 22 */ Net<L<P<0,1>,P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>,P<18,19>,P<20,21>>,
                     L<P<0,12>,P<1,13>,P<2,6>,P<3,7>,P<4,10>,P<8,20>,P<9,21>,P<11,17>,P<14,18>,P<15,19>>,
                     L<P<0,2>,P<1,6>,P<3,12>,P<4,16>,P<5,17>,P<7,13>,P<8,14>,P<9,18>,P<15,20>,P<19,21>>,
                     L<P<0,8>,P<1,15>,P<2,14>,P<3,9>,P<5,11>,P<6,20>,P<7,19>,P<10,16>,P<12,18>,P<13,21>>,
                     L<P<0,4>,P<1,10>,P<3,8>,P<5,9>,P<7,14>,P<11,20>,P<12,16>,P<13,18>,P<17,21>>,
                     L<P<1,3>,P<2,5>,P<4,8>,P<6,9>,P<7,10>,P<11,14>,P<12,15>,P<13,17>,P<16,19>,P<18,20>>,
                     L<P<2,4>,P<3,12>,P<5,8>,P<6,11>,P<9,18>,P<10,15>,P<13,16>,P<17,19>>,
                     L<P<1,2>,P<3,4>,P<5,7>,P<6,12>,P<8,11>,P<9,15>,P<10,13>,P<14,16>,P<17,18>,P<19,20>>,
                     L<P<2,3>,P<4,5>,P<7,12>,P<8,10>,P<9,14>,P<11,13>,P<16,17>,P<18,19>>,
                     L<P<4,6>,P<5,8>,P<9,11>,P<10,12>,P<13,16>,P<15,17>>,
                     L<P<3,4>,P<6,7>,P<9,10>,P<11,12>,P<14,15>,P<17,18>>,
                     L<P<5,6>,P<7,8>,P<10,11>,P<13,14>,P<15,16>>,
                     L<P<6,7>,P<8,9>,P<12,13>,P<14,15>>>,
        /* 23 */ Net<L<P<0,20>,P<1,12>,P<2,16>,P<4,6>,P<5,10>,P<7,21>,P<8,14>,P<9,15>,P<11,22>,P<13,18>,P<17,19>>,
                     L<P<0,3>,P<1,11>,P<2,7>,P<4,17>,P<5,13>,P<6,19>,P<8,9>,P<10,18>,P<12,22>,P<14,15>,P<16,21>>,
                     L<P<0,1>,P<2,4>,P<3,12>,P<5,8>,P<6,9>,P<7,10>,P<11,20>,P<13,16>,P<14,17>,P<15,18>,P<19,21>>,
                     L<P<2,5>,P<4,8>,P<6,11>,P<7,14>,P<9,16>,P<12,17>,P<15,19>,P<18,21>>,
                     L<P<1,8>,P<3,14>,P<4,7>,P<9,20>,P<10,12>,P<11,13>,P<15,22>,P<16,19>>,
                     L<P<0,7>,P<1,5>,P<3,4>,P<6,11>,P<8,15>,P<9,14>,P<10,13>,P<12,17>,P<18,22>,P<19,20>>,
                     L<P<0,2>,P<1,6>,P<4,7>,P<5,9>,P<8,10>,P<13,15>,P<14,18>,P<16,19>,P<17,22>,P<20,21>>,
                     L<P<2,3>,P<4,5>,P<6,8>,P<7,9>,P<10,11>,P<12,13>,P<14,16>,P<15,17>,P<18,19>,P<21,22>>,
                     L<P<1,2>,P<3,6>,P<4,10>,P<7,8>,P<9,11>,P<12,14>,P<13,19>,P<15,16>,P<17,20>>,
                     L<P<2,3>,P<5,10>,P<6,7>,P<8,9>,P<13,18>,P<14,15>,P<16,17>,P<20,21>>,
                     L<P<3,4>,P<5,7>,P<10,12>,P<11,13>,P<16,18>,P<19,20>>,
                     L<P<4,6>,P<8,10>,P<9,12>,P<11,14>,P<13,15>,P<17,19>>,
                     L<P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>>>,
        /* 24 */ Net<L<P<0,20>,P<1,12>,P<2,16>,P<3,23>,P<4,6>,P<5,10>,P<7,21>,P<8,14>,P<9,15>,P<11,22>,P<13,18>,P<17,19>>,
                     L<P<0,3>,P<1,11>,P<2,7>,P<4,17>,P<5,13>,P<6,19>,P<8,9>,P<10,18>,P<12,22>,P<14,15>,P<16,21>,P<20,23>>,
                     L<P<0,1>,P<2,4>,P<3,12>,P<5,8>,P<6,9>,P<7,10>,P<11,20>,P<13,16>,P<14,17>,P<15,18>,P<19,21>,P<22,23>>,
                     L<P<2,5>,P<4,8>,P<6,11>,P<7,14>,P<9,16>,P<12,17>,P<15,19>,P<18,21>>,
                     L<P<1,8>,P<3,14>,P<4,7>,P<9,20>,P<10,12>,P<11,13>,P<15,22>,P<16,19>>,
                     L<P<0,7>,P<1,5>,P<3,4>,P<6,11>,P<8,15>,P<9,14>,P<10,13>,P<12,17>,P<16,23>,P<18,22>,P<19,20>>,
                     L<P<0,2>,P<1,6>,P<4,7>,P<5,9>,P<8,10>,P<13,15>,P<14,18>,P<16,19>,P<17,22>,P<21,23>>,
                     L<P<2,3>,P<4,5>,P<6,8>,P<7,9>,P<10,11>,P<12,13>,P<14,16>,P<15,17>,P<18,19>,P<20,21>>,
                     L<P<1,2>,P<3,6>,P<4,10>,P<7,8>,P<9,11>,P<12,14>,P<13,19>,P<15,16>,P<17,20>,P<21,22>>,
                     L<P<2,3>,P<5,10>,P<6,7>,P<8,9>,P<13,18>,P<14,15>,P<16,17>,P<20,21>>,
                     L<P<3,4>,P<5,7>,P<10,12>,P<11,13>,P<16,18>,P<19,20>>,
                     L<P<4,6>,P<8,10>,P<9,12>,P<11,14>,P<13,15>,P<17,19>>,
                     L<P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>>>,
        /* 25 */ Net<L<P<0,2>,P<1,8>,P<3,18>,P<4,17>,P<5,20>,P<6,19>,P<7,9>,P<10,11>,P<12,13>,P<14,16>,P<15,22>,P<21,23>>,
                     L<P<0,3>,P<1,15>,P<2,18>,P<4,12>,P<5,21>,P<6,10>,P<7,14>,P<8,22>,P<9,16>,P<11,19>,P<13,17>,P<20,23>>,
                     L<P<0,4>,P<1,7>,P<2,13>,P<3,12>,P<5,6>,P<8,14>,P<9,15>,P<10,21>,P<11,20>,P<16,22>,P<17,18>,P<19,23>>,
                     L<P<0,5>,P<2,11>,P<3,6>,P<4,10>,P<7,16>,P<8,9>,P<12,21>,P<13,19>,P<14,15>,P<17,20>,P<18,23>>,
                     L<P<2,7>,P<6,9>,P<8,11>,P<14,24>,P<18,21>>,
                     L<P<3,8>,P<7,10>,P<11,12>,P<13,14>,P<15,21>,P<18,20>,P<22,24>>,
                     L<P<4,13>,P<10,16>,P<11,15>,P<18,24>,P<19,22>>,
                     L<P<1,4>,P<8,11>,P<9,19>,P<13,17>,P<14,18>,P<16,20>,P<23,24>>,
                     L<P<0,1>,P<4,5>,P<6,13>,P<9,14>,P<10,17>,P<12,16>,P<18,19>,P<20,21>,P<22,23>>,
                     L<P<2,6>,P<3,4>,P<5,13>,P<7,9>,P<12,18>,P<15,17>,P<16,19>,P<20,22>,P<21,23>>,
                     L<P<1,2>,P<5,8>,P<6,7>,P<9,10>,P<11,13>,P<14,15>,P<17,20>,P<21,22>>,
                     L<P<1,3>,P<2,4>,P<5,6>,P<7,11>,P<8,9>,P<10,13>,P<12,14>,P<15,16>,P<17,18>,P<19,20>>,
                     L<P<2,3>,P<4,8>,P<6,7>,P<9,12>,P<10,11>,P<13,14>,P<15,17>,P<16,18>,P<20,21>>,
                     L<P<3,5>,P<4,6>,P<7,8>,P<9,10>,P<11,12>,P<13,15>,P<14,17>,P<16,19>>,
                     L<P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>,P<18,19>>>,
        /* 26 */ Net<L<P<0,25>,P<1,3>,P<2,9>,P<4,19>,P<5,18>,P<6,21>,P<7,20>,P<8,10>,P<11,12>,P<13,14>,P<15,17>,P<16,23>,P<22,24>>,
                     L<P<1,4>,P<2,16>,P<3,19>,P<5,13>,P<6,22>,P<7,11>,P<8,15>,P<9,23>,P<10,17>,P<12,20>,P<14,18>,P<21,24>>,
                     L<P<1,5>,P<2,8>,P<3,14>,P<4,13>,P<6,7>,P<9,15>,P<10,16>,P<11,22>,P<12,21>,P<17,23>,P<18,19>,P<20,24>>,
                     L<P<0,10>,P<1,6>,P<3,7>,P<4,11>,P<5,12>,P<13,20>,P<14,21>,P<15,25>,P<18,22>,P<19,24>>,
                     L<P<0,4>,P<8,10>,P<12,13>,P<15,17>,P<21,25>>,
                     L<P<0,2>,P<4,8>,P<10,12>,P<13,15>,P<17,21>,P<23,25>>,
                     L<P<0,1>,P<2,3>,P<4,5>,P<8,14>,P<9,13>,P<11,17>,P<12,16>,P<20,21>,P<22,23>,P<24,25>>,
                     L<P<1,4>,P<3,10>,P<6,9>,P<7,13>,P<8,11>,P<12,18>,P<14,17>,P<15,22>,P<16,19>,P<21,24>>,
                     L<P<2,6>,P<3,8>,P<5,7>,P<9,12>,P<13,16>,P<17,22>,P<18,20>,P<19,23>>,
                     L<P<1,2>,P<4,6>,P<5,9>,P<7,10>,P<11,12>,P<13,14>,P<15,18>,P<16,20>,P<19,21>,P<23,24>>,
                     L<P<2,4>,P<3,5>,P<7,13>,P<8,9>,P<10,14>,P<11,15>,P<12,18>,P<16,17>,P<20,22>,P<21,23>>,
                     L<P<3,4>,P<6,9>,P<7,11>,P<10,12>,P<13,15>,P<14,18>,P<16,19>,P<21,22>>,
                     L<P<5,7>,P<6,8>,P<9,13>,P<10,11>,P<12,16>,P<14,15>,P<17,19>,P<18,20>>,
                     L<P<5,6>,P<7,8>,P<9,10>,P<11,13>,P<12,14>,P<15,16>,P<17,18>,P<19,20>>,
                     L<P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>,P<18,19>,P<20,21>>>,
        /* 27 */ Net<L<P<0,9>,P<1,6>,P<2,4>,P<3,7>,P<5,8>,P<11,24>,P<12,23>,P<13,26>,P<14,25>,P<15,19>,P<16,17>,P<18,22>,P<20,21>>,
                     L<P<0,1>,P<3,5>,P<4,10>,P<6,9>,P<7,8>,P<11,16>,P<12,18>,P<13,20>,P<14,15>,P<17,24>,P<19,25>,P<21,26>,P<22,23>>,
                     L<P<1,3>,P<2,5>,P<4,7>,P<8,10>,P<11,12>,P<13,14>,P<15,16>,P<17,19>,P<18,20>,P<21,22>,P<23,24>,P<25,26>>,
                     L<P<0,4>,P<1,2>,P<3,7>,P<5,9>,P<6,8>,P<11,13>,P<12,14>,P<15,21>,P<16,22>,P<17,18>,P<19,20>,P<23,25>,P<24,26>>,
                     L<P<0,1>,P<2,6>,P<4,5>,P<7,8>,P<9,10>,P<12,13>,P<14,23>,P<15,17>,P<16,18>,P<19,21>,P<20,22>,P<24,25>>,
                     L<P<0,11>,P<2,4>,P<3,6>,P<5,7>,P<8,9>,P<12,15>,P<13,17>,P<16,19>,P<18,21>,P<20,24>,P<22,25>>,
                     L<P<1,2>,P<3,4>,P<5,6>,P<7,8>,P<13,15>,P<14,17>,P<20,23>,P<22,24>>,
                     L<P<1,12>,P<2,3>,P<4,5>,P<6,7>,P<14,16>,P<17,19>,P<18,20>,P<21,23>>,
                     L<P<2,13>,P<14,15>,P<16,17>,P<18,19>,P<20,21>,P<22,23>>,
                     L<P<3,14>,P<4,15>,P<5,16>,P<10,21>,P<17,18>,P<19,20>>,
                     L<P<6,17>,P<7,18>,P<8,19>,P<9,20>,P<10,13>,P<14,22>,P<15,23>,P<16,24>>,
                     L<P<6,10>,P<7,14>,P<8,11>,P<9,12>,P<17,25>,P<18,26>,P<19,23>,P<20,24>>,
                     L<P<4,8>,P<5,9>,P<11,15>,P<12,16>,P<13,17>,P<18,22>,P<21,25>,P<24,26>>,
                     L<P<2,4>,P<3,5>,P<6,8>,P<7,9>,P<10,11>,P<12,14>,P<13,15>,P<16,18>,P<17,19>,P<20,22>,P<21,23>,P<25,26>>,
                     L<P<1,2>,P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,20>,P<21,22>,P<23,24>>>,
        /* 28 */ Net<L<P<0,9>,P<1,20>,P<2,21>,P<3,22>,P<4,19>,P<5,24>,P<6,25>,P<7,26>,P<8,23>,P<10,15>,P<11,13>,P<12,17>,P<14,16>,P<18,27>>,
                     L<P<0,18>,P<1,7>,P<2,6>,P<3,5>,P<4,8>,P<9,27>,P<10,12>,P<11,14>,P<13,16>,P<15,17>,P<19,23>,P<20,26>,P<21,25>,P<22,24>>,
                     L<P<1,2>,P<3,4>,P<5,19>,P<6,20>,P<7,21>,P<8,22>,P<9,18>,P<10,11>,P<12,14>,P<13,15>,P<16,17>,P<23,24>,P<25,26>>,
                     L<P<0,3>,P<1,10>,P<5,8>,P<6,7>,P<11,13>,P<14,16>,P<17,26>,P<19,22>,P<20,21>,P<24,27>>,
                     L<P<0,1>,P<2,7>,P<3,10>,P<4,8>,P<12,13>,P<14,15>,P<17,24>,P<19,23>,P<20,25>,P<26,27>>,
                     L<P<1,3>,P<2,6>,P<4,5>,P<7,19>,P<8,20>,P<11,12>,P<13,14>,P<15,16>,P<21,25>,P<22,23>,P<24,26>>,
                     L<P<2,4>,P<5,12>,P<7,8>,P<9,11>,P<10,14>,P<13,17>,P<15,22>,P<16,18>,P<19,20>,P<23,25>>,
                     L<P<2,9>,P<4,11>,P<5,6>,P<7,13>,P<8,10>,P<14,20>,P<16,23>,P<17,19>,P<18,25>,P<21,22>>,
                     L<P<1,2>,P<3,16>,P<4,9>,P<6,12>,P<10,14>,P<11,24>,P<13,17>,P<15,21>,P<18,23>,P<25,26>>,
                     L<P<2,8>,P<3,5>,P<4,7>,P<6,16>,P<9,15>,P<11,21>,P<12,18>,P<19,25>,P<20,23>,P<22,24>>,
                     L<P<2,3>,P<5,8>,P<7,9>,P<11,15>,P<12,16>,P<18,20>,P<19,22>,P<24,25>>,
                     L<P<6,8>,P<10,12>,P<11,13>,P<14,16>,P<15,17>,P<19,21>>,
                     L<P<5,6>,P<8,10>,P<9,11>,P<12,13>,P<14,15>,P<16,18>,P<17,19>,P<21,22>>,
                     L<P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,14>,P<13,15>,P<16,17>,P<18,19>,P<20,21>,P<22,23>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,20>,P<21,22>,P<23,24>>>,
        /* 29 */ Net<L<P<0,12>,P<1,10>,P<2,9>,P<3,7>,P<5,11>,P<6,8>,P<13,26>,P<14,25>,P<15,28>,P<16,27>,P<17,21>,P<18,19>,P<20,24>,P<22,23>>,
                     L<P<1,6>,P<2,3>,P<4,11>,P<7,9>,P<8,10>,P<13,18>,P<14,20>,P<15,22>,P<16,17>,P<19,26>,P<21,27>,P<23,28>,P<24,25>>,
                     L<P<0,4>,P<1,2>,P<3,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,21>,P<20,22>,P<23,24>,P<25,26>,P<27,28>>,
                     L<P<4,6>,P<5,9>,P<8,11>,P<10,12>,P<13,15>,P<14,16>,P<17,23>,P<18,24>,P<19,20>,P<21,22>,P<25,27>,P<26,28>>,
                     L<P<0,5>,P<3,8>,P<4,7>,P<6,11>,P<9,10>,P<14,15>,P<16,25>,P<17,19>,P<18,20>,P<21,23>,P<22,24>,P<26,27>>,
                     L<P<0,1>,P<2,5>,P<6,9>,P<7,8>,P<10,11>,P<14,17>,P<15,19>,P<18,21>,P<20,23>,P<22,26>,P<24,27>>,
                     L<P<0,13>,P<1,3>,P<2,4>,P<5,6>,P<9,10>,P<15,17>,P<16,19>,P<22,25>,P<24,26>>,
                     L<P<1,2>,P<3,4>,P<5,7>,P<6,8>,P<16,18>,P<19,21>,P<20,22>,P<23,25>>,
                     L<P<1,14>,P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<16,17>,P<18,19>,P<20,21>,P<22,23>,P<24,25>>,
                     L<P<2,15>,P<3,4>,P<5,6>,P<10,23>,P<11,24>,P<12,25>,P<19,20>,P<21,22>>,
                     L<P<3,16>,P<4,17>,P<5,18>,P<6,19>,P<7,20>,P<8,21>,P<9,22>,P<10,15>>,
                     L<P<6,10>,P<8,13>,P<9,14>,P<11,16>,P<12,17>,P<18,26>,P<19,27>,P<20,28>>,
                     L<P<4,8>,P<5,9>,P<7,11>,P<12,13>,P<14,18>,P<15,19>,P<16,20>,P<17,21>,P<22,26>,P<23,27>,P<24,28>>,
                     L<P<2,4>,P<3,5>,P<6,8>,P<7,9>,P<10,12>,P<11,14>,P<13,15>,P<16,18>,P<17,19>,P<20,22>,P<21,23>,P<24,26>,P<25,27>>,
                     L<P<1,2>,P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,20>,P<21,22>,P<23,24>,P<25,26>,P<27,28>>>,
        /* 30 */ Net<L<P<1,2>,P<3,10>,P<4,14>,P<5,8>,P<6,13>,P<7,12>,P<9,11>,P<16,17>,P<18,25>,P<19,29>,P<20,23>,P<21,28>,P<22,27>,P<24,26>>,
                     L<P<0,14>,P<1,5>,P<2,8>,P<3,7>,P<6,9>,P<10,12>,P<11,13>,P<15,29>,P<16,20>,P<17,23>,P<18,22>,P<21,24>,P<25,27>,P<26,28>>,
                     L<P<0,7>,P<1,6>,P<2,9>,P<4,10>,P<5,11>,P<8,13>,P<12,14>,P<15,22>,P<16,21>,P<17,24>,P<19,25>,P<20,26>,P<23,28>,P<27,29>>,
                     L<P<0,6>,P<2,4>,P<3,5>,P<7,11>,P<8,10>,P<9,12>,P<13,14>,P<15,21>,P<17,19>,P<18,20>,P<22,26>,P<23,25>,P<24,27>,P<28,29>>,
                     L<P<0,3>,P<1,2>,P<4,7>,P<5,9>,P<6,8>,P<10,11>,P<12,13>,P<14,29>,P<15,18>,P<16,17>,P<19,22>,P<20,24>,P<21,23>,P<25,26>,P<27,28>>,
                     L<P<0,1>,P<2,3>,P<4,6>,P<7,9>,P<10,12>,P<11,13>,P<15,16>,P<17,18>,P<19,21>,P<22,24>,P<25,27>,P<26,28>>,
                     L<P<0,15>,P<1,2>,P<3,5>,P<8,10>,P<11,12>,P<13,28>,P<16,17>,P<18,20>,P<23,25>,P<26,27>>,
                     L<P<1,16>,P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<12,27>,P<18,19>,P<20,21>,P<22,23>,P<24,25>>,
                     L<P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<17,18>,P<19,20>,P<21,22>,P<23,24>,P<25,26>>,
                     L<P<2,17>,P<3,18>,P<4,19>,P<5,6>,P<7,8>,P<9,24>,P<10,25>,P<11,26>,P<20,21>,P<22,23>>,
                     L<P<5,20>,P<6,21>,P<7,22>,P<8,23>,P<9,16>,P<10,17>,P<11,18>,P<12,19>>,
                     L<P<5,9>,P<6,10>,P<7,11>,P<8,15>,P<13,20>,P<14,21>,P<18,22>,P<19,23>>,
                     L<P<3,5>,P<4,8>,P<7,9>,P<12,15>,P<13,16>,P<14,17>,P<20,24>,P<21,25>>,
                     L<P<2,4>,P<6,8>,P<10,12>,P<11,13>,P<14,15>,P<16,18>,P<17,19>,P<20,22>,P<21,23>,P<24,26>,P<25,27>>,
                     L<P<1,2>,P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,20>,P<21,22>,P<23,24>,P<25,26>,P<27,28>>>,
        /* 31 */ Net<L<P<0,1>,P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>,P<18,19>,P<20,21>,P<22,23>,P<24,25>,P<26,27>,P<28,29>>,
                     L<P<0,2>,P<1,3>,P<4,6>,P<5,7>,P<8,10>,P<9,11>,P<12,14>,P<13,15>,P<16,18>,P<17,19>,P<20,22>,P<21,23>,P<24,26>,P<25,27>,P<28,30>>,
                     L<P<0,4>,P<1,5>,P<2,6>,P<3,7>,P<8,12>,P<9,13>,P<10,14>,P<11,15>,P<16,20>,P<17,21>,P<18,22>,P<19,23>,P<24,28>,P<25,29>,P<26,30>>,
                     L<P<0,8>,P<1,9>,P<2,10>,P<3,11>,P<4,12>,P<5,13>,P<6,14>,P<7,15>,P<16,24>,P<17,25>,P<18,26>,P<19,27>,P<20,28>,P<21,29>,P<22,30>>,
                     L<P<0,16>,P<1,8>,P<2,4>,P<3,12>,P<5,10>,P<6,9>,P<7,14>,P<11,13>,P<17,24>,P<18,20>,P<19,28>,P<21,26>,P<22,25>,P<23,30>,P<27,29>>,
                     L<P<1,2>,P<3,5>,P<4,8>,P<6,22>,P<7,11>,P<9,25>,P<10,12>,P<13,14>,P<17,18>,P<19,21>,P<20,24>,P<23,27>,P<26,28>,P<29,30>>,
                     L<P<1,17>,P<2,18>,P<3,19>,P<4,20>,P<5,10>,P<7,23>,P<8,24>,P<11,27>,P<12,28>,P<13,29>,P<14,30>,P<21,26>>,
                     L<P<3,17>,P<4,16>,P<5,21>,P<6,18>,P<7,9>,P<8,20>,P<10,26>,P<11,23>,P<13,25>,P<14,28>,P<15,27>,P<22,24>>,
                     L<P<1,4>,P<3,8>,P<5,16>,P<7,17>,P<9,21>,P<10,22>,P<11,19>,P<12,20>,P<14,24>,P<15,26>,P<23,28>,P<27,30>>,
                     L<P<2,5>,P<7,8>,P<9,18>,P<11,17>,P<12,16>,P<13,22>,P<14,20>,P<15,19>,P<23,24>,P<26,29>>,
                     L<P<2,4>,P<6,12>,P<9,16>,P<10,11>,P<13,17>,P<14,18>,P<15,22>,P<19,25>,P<20,21>,P<27,29>>,
                     L<P<5,6>,P<8,12>,P<9,10>,P<11,13>,P<14,16>,P<15,17>,P<18,20>,P<19,23>,P<21,22>,P<25,26>>,
                     L<P<3,5>,P<6,7>,P<8,9>,P<10,12>,P<11,14>,P<13,16>,P<15,18>,P<17,20>,P<19,21>,P<22,23>,P<24,25>,P<26,28>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,20>,P<21,22>,P<23,24>,P<25,26>,P<27,28>>>,
        /* 32 */ Net<L<P<0,1>,P<2,3>,P<4,5>,P<6,7>,P<8,9>,P<10,11>,P<12,13>,P<14,15>,P<16,17>,P<18,19>,P<20,21>,P<22,23>,P<24,25>,P<26,27>,P<28,29>,P<30,31>>,
                     L<P<0,2>,P<1,3>,P<4,6>,P<5,7>,P<8,10>,P<9,11>,P<12,14>,P<13,15>,P<16,18>,P<17,19>,P<20,22>,P<21,23>,P<24,26>,P<25,27>,P<28,30>,P<29,31>>,
                     L<P<0,4>,P<1,5>,P<2,6>,P<3,7>,P<8,12>,P<9,13>,P<10,14>,P<11,15>,P<16,20>,P<17,21>,P<18,22>,P<19,23>,P<24,28>,P<25,29>,P<26,30>,P<27,31>>,
                     L<P<0,8>,P<1,9>,P<2,10>,P<3,11>,P<4,12>,P<5,13>,P<6,14>,P<7,15>,P<16,24>,P<17,25>,P<18,26>,P<19,27>,P<20,28>,P<21,29>,P<22,30>,P<23,31>>,
                     L<P<0,16>,P<1,8>,P<2,4>,P<3,12>,P<5,10>,P<6,9>,P<7,14>,P<11,13>,P<15,31>,P<17,24>,P<18,20>,P<19,28>,P<21,26>,P<22,25>,P<23,30>,P<27,29>>,
                     L<P<1,2>,P<3,5>,P<4,8>,P<6,22>,P<7,11>,P<9,25>,P<10,12>,P<13,14>,P<17,18>,P<19,21>,P<20,24>,P<23,27>,P<26,28>,P<29,30>>,
                     L<P<1,17>,P<2,18>,P<3,19>,P<4,20>,P<5,10>,P<7,23>,P<8,24>,P<11,27>,P<12,28>,P<13,29>,P<14,30>,P<21,26>>,
                     L<P<3,17>,P<4,16>,P<5,21>,P<6,18>,P<7,9>,P<8,20>,P<10,26>,P<11,23>,P<13,25>,P<14,28>,P<15,27>,P<22,24>>,
                     L<P<1,4>,P<3,8>,P<5,16>,P<7,17>,P<9,21>,P<10,22>,P<11,19>,P<12,20>,P<14,24>,P<15,26>,P<23,28>,P<27,30>>,
                     L<P<2,5>,P<7,8>,P<9,18>,P<11,17>,P<12,16>,P<13,22>,P<14,20>,P<15,19>,P<23,24>,P<26,29>>,
                     L<P<2,4>,P<6,12>,P<9,16>,P<10,11>,P<13,17>,P<14,18>,P<15,22>,P<19,25>,P<20,21>,P<27,29>>,
                     L<P<5,6>,P<8,12>,P<9,10>,P<11,13>,P<14,16>,P<15,17>,P<18,20>,P<19,23>,P<21,22>,P<25,26>>,
                     L<P<3,5>,P<6,7>,P<8,9>,P<10,12>,P<11,14>,P<13,16>,P<15,18>,P<17,20>,P<19,21>,P<22,23>,P<24,25>,P<26,28>>,
                     L<P<3,4>,P<5,6>,P<7,8>,P<9,10>,P<11,12>,P<13,14>,P<15,16>,P<17,18>,P<19,20>,P<21,22>,P<23,24>,P<25,26>,P<27,28>>>
        >;

      template <typename T, typename C, typename ... Layers>
      void ApplyNet(T* ptr, C comp, Net<Layers...>) const
      {
        (util::ProcessLayerPairs<T, C>(ptr, comp, Layers{}), ...);
      }
    };
  }



}